// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graph.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace transport_router_serialize {
class RouteSettings;
struct RouteSettingsDefaultTypeInternal;
extern RouteSettingsDefaultTypeInternal _RouteSettings_default_instance_;
class StopById;
struct StopByIdDefaultTypeInternal;
extern StopByIdDefaultTypeInternal _StopById_default_instance_;
class TransportRouter;
struct TransportRouterDefaultTypeInternal;
extern TransportRouterDefaultTypeInternal _TransportRouter_default_instance_;
}  // namespace transport_router_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_router_serialize::RouteSettings* Arena::CreateMaybeMessage<::transport_router_serialize::RouteSettings>(Arena*);
template<> ::transport_router_serialize::StopById* Arena::CreateMaybeMessage<::transport_router_serialize::StopById>(Arena*);
template<> ::transport_router_serialize::TransportRouter* Arena::CreateMaybeMessage<::transport_router_serialize::TransportRouter>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_router_serialize {

// ===================================================================

class RouteSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_router_serialize.RouteSettings) */ {
 public:
  inline RouteSettings() : RouteSettings(nullptr) {}
  ~RouteSettings() override;
  explicit PROTOBUF_CONSTEXPR RouteSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteSettings(const RouteSettings& from);
  RouteSettings(RouteSettings&& from) noexcept
    : RouteSettings() {
    *this = ::std::move(from);
  }

  inline RouteSettings& operator=(const RouteSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteSettings& operator=(RouteSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteSettings* internal_default_instance() {
    return reinterpret_cast<const RouteSettings*>(
               &_RouteSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteSettings& a, RouteSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteSettings& from) {
    RouteSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_router_serialize.RouteSettings";
  }
  protected:
  explicit RouteSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 2,
    kWaitTimeFieldNumber = 1,
  };
  // double velocity = 2;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // int32 wait_time = 1;
  void clear_wait_time();
  int32_t wait_time() const;
  void set_wait_time(int32_t value);
  private:
  int32_t _internal_wait_time() const;
  void _internal_set_wait_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_router_serialize.RouteSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double velocity_;
    int32_t wait_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopById final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_router_serialize.StopById) */ {
 public:
  inline StopById() : StopById(nullptr) {}
  ~StopById() override;
  explicit PROTOBUF_CONSTEXPR StopById(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopById(const StopById& from);
  StopById(StopById&& from) noexcept
    : StopById() {
    *this = ::std::move(from);
  }

  inline StopById& operator=(const StopById& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopById& operator=(StopById&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopById& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopById* internal_default_instance() {
    return reinterpret_cast<const StopById*>(
               &_StopById_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopById& a, StopById& b) {
    a.Swap(&b);
  }
  inline void Swap(StopById* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopById* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopById* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopById>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopById& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopById& from) {
    StopById::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopById* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_router_serialize.StopById";
  }
  protected:
  explicit StopById(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStopIdFieldNumber = 2,
  };
  // uint32 id = 1;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // uint32 stop_id = 2;
  void clear_stop_id();
  uint32_t stop_id() const;
  void set_stop_id(uint32_t value);
  private:
  uint32_t _internal_stop_id() const;
  void _internal_set_stop_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_router_serialize.StopById)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t id_;
    uint32_t stop_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TransportRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_router_serialize.TransportRouter) */ {
 public:
  inline TransportRouter() : TransportRouter(nullptr) {}
  ~TransportRouter() override;
  explicit PROTOBUF_CONSTEXPR TransportRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportRouter(const TransportRouter& from);
  TransportRouter(TransportRouter&& from) noexcept
    : TransportRouter() {
    *this = ::std::move(from);
  }

  inline TransportRouter& operator=(const TransportRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportRouter& operator=(TransportRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportRouter* internal_default_instance() {
    return reinterpret_cast<const TransportRouter*>(
               &_TransportRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransportRouter& a, TransportRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportRouter& from) {
    TransportRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_router_serialize.TransportRouter";
  }
  protected:
  explicit TransportRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopByIdFieldNumber = 2,
    kSettingsFieldNumber = 1,
    kGraphFieldNumber = 3,
    kRouterFieldNumber = 4,
  };
  // repeated .transport_router_serialize.StopById stop_by_id = 2;
  int stop_by_id_size() const;
  private:
  int _internal_stop_by_id_size() const;
  public:
  void clear_stop_by_id();
  ::transport_router_serialize::StopById* mutable_stop_by_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_serialize::StopById >*
      mutable_stop_by_id();
  private:
  const ::transport_router_serialize::StopById& _internal_stop_by_id(int index) const;
  ::transport_router_serialize::StopById* _internal_add_stop_by_id();
  public:
  const ::transport_router_serialize::StopById& stop_by_id(int index) const;
  ::transport_router_serialize::StopById* add_stop_by_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_serialize::StopById >&
      stop_by_id() const;

  // .transport_router_serialize.RouteSettings settings = 1;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::transport_router_serialize::RouteSettings& settings() const;
  PROTOBUF_NODISCARD ::transport_router_serialize::RouteSettings* release_settings();
  ::transport_router_serialize::RouteSettings* mutable_settings();
  void set_allocated_settings(::transport_router_serialize::RouteSettings* settings);
  private:
  const ::transport_router_serialize::RouteSettings& _internal_settings() const;
  ::transport_router_serialize::RouteSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::transport_router_serialize::RouteSettings* settings);
  ::transport_router_serialize::RouteSettings* unsafe_arena_release_settings();

  // .graph_serialize.Graph graph = 3;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::graph_serialize::Graph& graph() const;
  PROTOBUF_NODISCARD ::graph_serialize::Graph* release_graph();
  ::graph_serialize::Graph* mutable_graph();
  void set_allocated_graph(::graph_serialize::Graph* graph);
  private:
  const ::graph_serialize::Graph& _internal_graph() const;
  ::graph_serialize::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::graph_serialize::Graph* graph);
  ::graph_serialize::Graph* unsafe_arena_release_graph();

  // .graph_serialize.Router router = 4;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::graph_serialize::Router& router() const;
  PROTOBUF_NODISCARD ::graph_serialize::Router* release_router();
  ::graph_serialize::Router* mutable_router();
  void set_allocated_router(::graph_serialize::Router* router);
  private:
  const ::graph_serialize::Router& _internal_router() const;
  ::graph_serialize::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::graph_serialize::Router* router);
  ::graph_serialize::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_router_serialize.TransportRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_serialize::StopById > stop_by_id_;
    ::transport_router_serialize::RouteSettings* settings_;
    ::graph_serialize::Graph* graph_;
    ::graph_serialize::Router* router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteSettings

// int32 wait_time = 1;
inline void RouteSettings::clear_wait_time() {
  _impl_.wait_time_ = 0;
}
inline int32_t RouteSettings::_internal_wait_time() const {
  return _impl_.wait_time_;
}
inline int32_t RouteSettings::wait_time() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.RouteSettings.wait_time)
  return _internal_wait_time();
}
inline void RouteSettings::_internal_set_wait_time(int32_t value) {
  
  _impl_.wait_time_ = value;
}
inline void RouteSettings::set_wait_time(int32_t value) {
  _internal_set_wait_time(value);
  // @@protoc_insertion_point(field_set:transport_router_serialize.RouteSettings.wait_time)
}

// double velocity = 2;
inline void RouteSettings::clear_velocity() {
  _impl_.velocity_ = 0;
}
inline double RouteSettings::_internal_velocity() const {
  return _impl_.velocity_;
}
inline double RouteSettings::velocity() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.RouteSettings.velocity)
  return _internal_velocity();
}
inline void RouteSettings::_internal_set_velocity(double value) {
  
  _impl_.velocity_ = value;
}
inline void RouteSettings::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:transport_router_serialize.RouteSettings.velocity)
}

// -------------------------------------------------------------------

// StopById

// uint32 id = 1;
inline void StopById::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t StopById::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t StopById::id() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.StopById.id)
  return _internal_id();
}
inline void StopById::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void StopById::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transport_router_serialize.StopById.id)
}

// uint32 stop_id = 2;
inline void StopById::clear_stop_id() {
  _impl_.stop_id_ = 0u;
}
inline uint32_t StopById::_internal_stop_id() const {
  return _impl_.stop_id_;
}
inline uint32_t StopById::stop_id() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.StopById.stop_id)
  return _internal_stop_id();
}
inline void StopById::_internal_set_stop_id(uint32_t value) {
  
  _impl_.stop_id_ = value;
}
inline void StopById::set_stop_id(uint32_t value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transport_router_serialize.StopById.stop_id)
}

// -------------------------------------------------------------------

// TransportRouter

// .transport_router_serialize.RouteSettings settings = 1;
inline bool TransportRouter::_internal_has_settings() const {
  return this != internal_default_instance() && _impl_.settings_ != nullptr;
}
inline bool TransportRouter::has_settings() const {
  return _internal_has_settings();
}
inline void TransportRouter::clear_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.settings_ != nullptr) {
    delete _impl_.settings_;
  }
  _impl_.settings_ = nullptr;
}
inline const ::transport_router_serialize::RouteSettings& TransportRouter::_internal_settings() const {
  const ::transport_router_serialize::RouteSettings* p = _impl_.settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_router_serialize::RouteSettings&>(
      ::transport_router_serialize::_RouteSettings_default_instance_);
}
inline const ::transport_router_serialize::RouteSettings& TransportRouter::settings() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.TransportRouter.settings)
  return _internal_settings();
}
inline void TransportRouter::unsafe_arena_set_allocated_settings(
    ::transport_router_serialize::RouteSettings* settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settings_);
  }
  _impl_.settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_router_serialize.TransportRouter.settings)
}
inline ::transport_router_serialize::RouteSettings* TransportRouter::release_settings() {
  
  ::transport_router_serialize::RouteSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_router_serialize::RouteSettings* TransportRouter::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:transport_router_serialize.TransportRouter.settings)
  
  ::transport_router_serialize::RouteSettings* temp = _impl_.settings_;
  _impl_.settings_ = nullptr;
  return temp;
}
inline ::transport_router_serialize::RouteSettings* TransportRouter::_internal_mutable_settings() {
  
  if (_impl_.settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_router_serialize::RouteSettings>(GetArenaForAllocation());
    _impl_.settings_ = p;
  }
  return _impl_.settings_;
}
inline ::transport_router_serialize::RouteSettings* TransportRouter::mutable_settings() {
  ::transport_router_serialize::RouteSettings* _msg = _internal_mutable_settings();
  // @@protoc_insertion_point(field_mutable:transport_router_serialize.TransportRouter.settings)
  return _msg;
}
inline void TransportRouter::set_allocated_settings(::transport_router_serialize::RouteSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:transport_router_serialize.TransportRouter.settings)
}

// repeated .transport_router_serialize.StopById stop_by_id = 2;
inline int TransportRouter::_internal_stop_by_id_size() const {
  return _impl_.stop_by_id_.size();
}
inline int TransportRouter::stop_by_id_size() const {
  return _internal_stop_by_id_size();
}
inline void TransportRouter::clear_stop_by_id() {
  _impl_.stop_by_id_.Clear();
}
inline ::transport_router_serialize::StopById* TransportRouter::mutable_stop_by_id(int index) {
  // @@protoc_insertion_point(field_mutable:transport_router_serialize.TransportRouter.stop_by_id)
  return _impl_.stop_by_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_serialize::StopById >*
TransportRouter::mutable_stop_by_id() {
  // @@protoc_insertion_point(field_mutable_list:transport_router_serialize.TransportRouter.stop_by_id)
  return &_impl_.stop_by_id_;
}
inline const ::transport_router_serialize::StopById& TransportRouter::_internal_stop_by_id(int index) const {
  return _impl_.stop_by_id_.Get(index);
}
inline const ::transport_router_serialize::StopById& TransportRouter::stop_by_id(int index) const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.TransportRouter.stop_by_id)
  return _internal_stop_by_id(index);
}
inline ::transport_router_serialize::StopById* TransportRouter::_internal_add_stop_by_id() {
  return _impl_.stop_by_id_.Add();
}
inline ::transport_router_serialize::StopById* TransportRouter::add_stop_by_id() {
  ::transport_router_serialize::StopById* _add = _internal_add_stop_by_id();
  // @@protoc_insertion_point(field_add:transport_router_serialize.TransportRouter.stop_by_id)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_router_serialize::StopById >&
TransportRouter::stop_by_id() const {
  // @@protoc_insertion_point(field_list:transport_router_serialize.TransportRouter.stop_by_id)
  return _impl_.stop_by_id_;
}

// .graph_serialize.Graph graph = 3;
inline bool TransportRouter::_internal_has_graph() const {
  return this != internal_default_instance() && _impl_.graph_ != nullptr;
}
inline bool TransportRouter::has_graph() const {
  return _internal_has_graph();
}
inline const ::graph_serialize::Graph& TransportRouter::_internal_graph() const {
  const ::graph_serialize::Graph* p = _impl_.graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::graph_serialize::Graph&>(
      ::graph_serialize::_Graph_default_instance_);
}
inline const ::graph_serialize::Graph& TransportRouter::graph() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.TransportRouter.graph)
  return _internal_graph();
}
inline void TransportRouter::unsafe_arena_set_allocated_graph(
    ::graph_serialize::Graph* graph) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  _impl_.graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_router_serialize.TransportRouter.graph)
}
inline ::graph_serialize::Graph* TransportRouter::release_graph() {
  
  ::graph_serialize::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::graph_serialize::Graph* TransportRouter::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:transport_router_serialize.TransportRouter.graph)
  
  ::graph_serialize::Graph* temp = _impl_.graph_;
  _impl_.graph_ = nullptr;
  return temp;
}
inline ::graph_serialize::Graph* TransportRouter::_internal_mutable_graph() {
  
  if (_impl_.graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::Graph>(GetArenaForAllocation());
    _impl_.graph_ = p;
  }
  return _impl_.graph_;
}
inline ::graph_serialize::Graph* TransportRouter::mutable_graph() {
  ::graph_serialize::Graph* _msg = _internal_mutable_graph();
  // @@protoc_insertion_point(field_mutable:transport_router_serialize.TransportRouter.graph)
  return _msg;
}
inline void TransportRouter::set_allocated_graph(::graph_serialize::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_);
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph));
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:transport_router_serialize.TransportRouter.graph)
}

// .graph_serialize.Router router = 4;
inline bool TransportRouter::_internal_has_router() const {
  return this != internal_default_instance() && _impl_.router_ != nullptr;
}
inline bool TransportRouter::has_router() const {
  return _internal_has_router();
}
inline const ::graph_serialize::Router& TransportRouter::_internal_router() const {
  const ::graph_serialize::Router* p = _impl_.router_;
  return p != nullptr ? *p : reinterpret_cast<const ::graph_serialize::Router&>(
      ::graph_serialize::_Router_default_instance_);
}
inline const ::graph_serialize::Router& TransportRouter::router() const {
  // @@protoc_insertion_point(field_get:transport_router_serialize.TransportRouter.router)
  return _internal_router();
}
inline void TransportRouter::unsafe_arena_set_allocated_router(
    ::graph_serialize::Router* router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  _impl_.router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_router_serialize.TransportRouter.router)
}
inline ::graph_serialize::Router* TransportRouter::release_router() {
  
  ::graph_serialize::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::graph_serialize::Router* TransportRouter::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_router_serialize.TransportRouter.router)
  
  ::graph_serialize::Router* temp = _impl_.router_;
  _impl_.router_ = nullptr;
  return temp;
}
inline ::graph_serialize::Router* TransportRouter::_internal_mutable_router() {
  
  if (_impl_.router_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::Router>(GetArenaForAllocation());
    _impl_.router_ = p;
  }
  return _impl_.router_;
}
inline ::graph_serialize::Router* TransportRouter::mutable_router() {
  ::graph_serialize::Router* _msg = _internal_mutable_router();
  // @@protoc_insertion_point(field_mutable:transport_router_serialize.TransportRouter.router)
  return _msg;
}
inline void TransportRouter::set_allocated_router(::graph_serialize::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_);
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router));
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_router_serialize.TransportRouter.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_router_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
