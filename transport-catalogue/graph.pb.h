// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace graph_serialize {
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class IncidenceList;
struct IncidenceListDefaultTypeInternal;
extern IncidenceListDefaultTypeInternal _IncidenceList_default_instance_;
class OptionalRouteInternalData;
struct OptionalRouteInternalDataDefaultTypeInternal;
extern OptionalRouteInternalDataDefaultTypeInternal _OptionalRouteInternalData_default_instance_;
class RouteInternalData;
struct RouteInternalDataDefaultTypeInternal;
extern RouteInternalDataDefaultTypeInternal _RouteInternalData_default_instance_;
class RouteWeight;
struct RouteWeightDefaultTypeInternal;
extern RouteWeightDefaultTypeInternal _RouteWeight_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutesInternalData;
struct RoutesInternalDataDefaultTypeInternal;
extern RoutesInternalDataDefaultTypeInternal _RoutesInternalData_default_instance_;
}  // namespace graph_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::graph_serialize::Edge* Arena::CreateMaybeMessage<::graph_serialize::Edge>(Arena*);
template<> ::graph_serialize::Graph* Arena::CreateMaybeMessage<::graph_serialize::Graph>(Arena*);
template<> ::graph_serialize::IncidenceList* Arena::CreateMaybeMessage<::graph_serialize::IncidenceList>(Arena*);
template<> ::graph_serialize::OptionalRouteInternalData* Arena::CreateMaybeMessage<::graph_serialize::OptionalRouteInternalData>(Arena*);
template<> ::graph_serialize::RouteInternalData* Arena::CreateMaybeMessage<::graph_serialize::RouteInternalData>(Arena*);
template<> ::graph_serialize::RouteWeight* Arena::CreateMaybeMessage<::graph_serialize::RouteWeight>(Arena*);
template<> ::graph_serialize::Router* Arena::CreateMaybeMessage<::graph_serialize::Router>(Arena*);
template<> ::graph_serialize::RoutesInternalData* Arena::CreateMaybeMessage<::graph_serialize::RoutesInternalData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace graph_serialize {

// ===================================================================

class RouteWeight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.RouteWeight) */ {
 public:
  inline RouteWeight() : RouteWeight(nullptr) {}
  ~RouteWeight() override;
  explicit PROTOBUF_CONSTEXPR RouteWeight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteWeight(const RouteWeight& from);
  RouteWeight(RouteWeight&& from) noexcept
    : RouteWeight() {
    *this = ::std::move(from);
  }

  inline RouteWeight& operator=(const RouteWeight& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteWeight& operator=(RouteWeight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteWeight& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteWeight* internal_default_instance() {
    return reinterpret_cast<const RouteWeight*>(
               &_RouteWeight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RouteWeight& a, RouteWeight& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteWeight* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteWeight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteWeight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteWeight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteWeight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteWeight& from) {
    RouteWeight::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteWeight* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.RouteWeight";
  }
  protected:
  explicit RouteWeight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTimeFieldNumber = 2,
    kBusIdFieldNumber = 1,
    kSpanCountFieldNumber = 3,
  };
  // double total_time = 2;
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // uint32 bus_id = 1;
  void clear_bus_id();
  uint32_t bus_id() const;
  void set_bus_id(uint32_t value);
  private:
  uint32_t _internal_bus_id() const;
  void _internal_set_bus_id(uint32_t value);
  public:

  // uint32 span_count = 3;
  void clear_span_count();
  uint32_t span_count() const;
  void set_span_count(uint32_t value);
  private:
  uint32_t _internal_span_count() const;
  void _internal_set_span_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:graph_serialize.RouteWeight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double total_time_;
    uint32_t bus_id_;
    uint32_t span_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class IncidenceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.IncidenceList) */ {
 public:
  inline IncidenceList() : IncidenceList(nullptr) {}
  ~IncidenceList() override;
  explicit PROTOBUF_CONSTEXPR IncidenceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceList(const IncidenceList& from);
  IncidenceList(IncidenceList&& from) noexcept
    : IncidenceList() {
    *this = ::std::move(from);
  }

  inline IncidenceList& operator=(const IncidenceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceList& operator=(IncidenceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceList* internal_default_instance() {
    return reinterpret_cast<const IncidenceList*>(
               &_IncidenceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IncidenceList& a, IncidenceList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IncidenceList& from) {
    IncidenceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.IncidenceList";
  }
  protected:
  explicit IncidenceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeIdFieldNumber = 1,
  };
  // repeated uint32 edge_id = 1;
  int edge_id_size() const;
  private:
  int _internal_edge_id_size() const;
  public:
  void clear_edge_id();
  private:
  uint32_t _internal_edge_id(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_edge_id() const;
  void _internal_add_edge_id(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_edge_id();
  public:
  uint32_t edge_id(int index) const;
  void set_edge_id(int index, uint32_t value);
  void add_edge_id(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      edge_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_edge_id();

  // @@protoc_insertion_point(class_scope:graph_serialize.IncidenceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > edge_id_;
    mutable std::atomic<int> _edge_id_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  ~Edge() override;
  explicit PROTOBUF_CONSTEXPR Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Edge& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Edge& from) {
    Edge::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 3,
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .graph_serialize.RouteWeight weight = 3;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  const ::graph_serialize::RouteWeight& weight() const;
  PROTOBUF_NODISCARD ::graph_serialize::RouteWeight* release_weight();
  ::graph_serialize::RouteWeight* mutable_weight();
  void set_allocated_weight(::graph_serialize::RouteWeight* weight);
  private:
  const ::graph_serialize::RouteWeight& _internal_weight() const;
  ::graph_serialize::RouteWeight* _internal_mutable_weight();
  public:
  void unsafe_arena_set_allocated_weight(
      ::graph_serialize::RouteWeight* weight);
  ::graph_serialize::RouteWeight* unsafe_arena_release_weight();

  // uint32 from = 1;
  void clear_from();
  uint32_t from() const;
  void set_from(uint32_t value);
  private:
  uint32_t _internal_from() const;
  void _internal_set_from(uint32_t value);
  public:

  // uint32 to = 2;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:graph_serialize.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::graph_serialize::RouteWeight* weight_;
    uint32_t from_;
    uint32_t to_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Graph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  ~Graph() override;
  explicit PROTOBUF_CONSTEXPR Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Graph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Graph& from) {
    Graph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
    kIncidenceListsFieldNumber = 2,
  };
  // repeated .graph_serialize.Edge edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::graph_serialize::Edge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >*
      mutable_edges();
  private:
  const ::graph_serialize::Edge& _internal_edges(int index) const;
  ::graph_serialize::Edge* _internal_add_edges();
  public:
  const ::graph_serialize::Edge& edges(int index) const;
  ::graph_serialize::Edge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >&
      edges() const;

  // repeated .graph_serialize.IncidenceList incidence_lists = 2;
  int incidence_lists_size() const;
  private:
  int _internal_incidence_lists_size() const;
  public:
  void clear_incidence_lists();
  ::graph_serialize::IncidenceList* mutable_incidence_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >*
      mutable_incidence_lists();
  private:
  const ::graph_serialize::IncidenceList& _internal_incidence_lists(int index) const;
  ::graph_serialize::IncidenceList* _internal_add_incidence_lists();
  public:
  const ::graph_serialize::IncidenceList& incidence_lists(int index) const;
  ::graph_serialize::IncidenceList* add_incidence_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >&
      incidence_lists() const;

  // @@protoc_insertion_point(class_scope:graph_serialize.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge > edges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList > incidence_lists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.RouteInternalData) */ {
 public:
  inline RouteInternalData() : RouteInternalData(nullptr) {}
  ~RouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR RouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteInternalData(const RouteInternalData& from);
  RouteInternalData(RouteInternalData&& from) noexcept
    : RouteInternalData() {
    *this = ::std::move(from);
  }

  inline RouteInternalData& operator=(const RouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInternalData& operator=(RouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalPrevEdgeCase {
    kPrevEdge = 2,
    OPTIONAL_PREV_EDGE_NOT_SET = 0,
  };

  static inline const RouteInternalData* internal_default_instance() {
    return reinterpret_cast<const RouteInternalData*>(
               &_RouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteInternalData& a, RouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteInternalData& from) {
    RouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.RouteInternalData";
  }
  protected:
  explicit RouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalTimeFieldNumber = 1,
    kPrevEdgeFieldNumber = 2,
  };
  // double total_time = 1;
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // uint32 prev_edge = 2;
  bool has_prev_edge() const;
  private:
  bool _internal_has_prev_edge() const;
  public:
  void clear_prev_edge();
  uint32_t prev_edge() const;
  void set_prev_edge(uint32_t value);
  private:
  uint32_t _internal_prev_edge() const;
  void _internal_set_prev_edge(uint32_t value);
  public:

  void clear_optional_prev_edge();
  OptionalPrevEdgeCase optional_prev_edge_case() const;
  // @@protoc_insertion_point(class_scope:graph_serialize.RouteInternalData)
 private:
  class _Internal;
  void set_has_prev_edge();

  inline bool has_optional_prev_edge() const;
  inline void clear_has_optional_prev_edge();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double total_time_;
    union OptionalPrevEdgeUnion {
      constexpr OptionalPrevEdgeUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t prev_edge_;
    } optional_prev_edge_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class OptionalRouteInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.OptionalRouteInternalData) */ {
 public:
  inline OptionalRouteInternalData() : OptionalRouteInternalData(nullptr) {}
  ~OptionalRouteInternalData() override;
  explicit PROTOBUF_CONSTEXPR OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionalRouteInternalData(const OptionalRouteInternalData& from);
  OptionalRouteInternalData(OptionalRouteInternalData&& from) noexcept
    : OptionalRouteInternalData() {
    *this = ::std::move(from);
  }

  inline OptionalRouteInternalData& operator=(const OptionalRouteInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionalRouteInternalData& operator=(OptionalRouteInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionalRouteInternalData& default_instance() {
    return *internal_default_instance();
  }
  enum OptionalRouteInternalDataCase {
    kRouteInternalData = 1,
    OPTIONAL_ROUTE_INTERNAL_DATA_NOT_SET = 0,
  };

  static inline const OptionalRouteInternalData* internal_default_instance() {
    return reinterpret_cast<const OptionalRouteInternalData*>(
               &_OptionalRouteInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OptionalRouteInternalData& a, OptionalRouteInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionalRouteInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionalRouteInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionalRouteInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionalRouteInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionalRouteInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionalRouteInternalData& from) {
    OptionalRouteInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionalRouteInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.OptionalRouteInternalData";
  }
  protected:
  explicit OptionalRouteInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteInternalDataFieldNumber = 1,
  };
  // .graph_serialize.RouteInternalData route_internal_data = 1;
  bool has_route_internal_data() const;
  private:
  bool _internal_has_route_internal_data() const;
  public:
  void clear_route_internal_data();
  const ::graph_serialize::RouteInternalData& route_internal_data() const;
  PROTOBUF_NODISCARD ::graph_serialize::RouteInternalData* release_route_internal_data();
  ::graph_serialize::RouteInternalData* mutable_route_internal_data();
  void set_allocated_route_internal_data(::graph_serialize::RouteInternalData* route_internal_data);
  private:
  const ::graph_serialize::RouteInternalData& _internal_route_internal_data() const;
  ::graph_serialize::RouteInternalData* _internal_mutable_route_internal_data();
  public:
  void unsafe_arena_set_allocated_route_internal_data(
      ::graph_serialize::RouteInternalData* route_internal_data);
  ::graph_serialize::RouteInternalData* unsafe_arena_release_route_internal_data();

  void clear_optional_route_internal_data();
  OptionalRouteInternalDataCase optional_route_internal_data_case() const;
  // @@protoc_insertion_point(class_scope:graph_serialize.OptionalRouteInternalData)
 private:
  class _Internal;
  void set_has_route_internal_data();

  inline bool has_optional_route_internal_data() const;
  inline void clear_has_optional_route_internal_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OptionalRouteInternalDataUnion {
      constexpr OptionalRouteInternalDataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::graph_serialize::RouteInternalData* route_internal_data_;
    } optional_route_internal_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.RoutesInternalData) */ {
 public:
  inline RoutesInternalData() : RoutesInternalData(nullptr) {}
  ~RoutesInternalData() override;
  explicit PROTOBUF_CONSTEXPR RoutesInternalData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalData(const RoutesInternalData& from);
  RoutesInternalData(RoutesInternalData&& from) noexcept
    : RoutesInternalData() {
    *this = ::std::move(from);
  }

  inline RoutesInternalData& operator=(const RoutesInternalData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalData& operator=(RoutesInternalData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalData* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalData*>(
               &_RoutesInternalData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RoutesInternalData& a, RoutesInternalData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesInternalData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesInternalData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutesInternalData& from) {
    RoutesInternalData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.RoutesInternalData";
  }
  protected:
  explicit RoutesInternalData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 1,
  };
  // repeated .graph_serialize.OptionalRouteInternalData routes_internal_data = 1;
  int routes_internal_data_size() const;
  private:
  int _internal_routes_internal_data_size() const;
  public:
  void clear_routes_internal_data();
  ::graph_serialize::OptionalRouteInternalData* mutable_routes_internal_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::OptionalRouteInternalData >*
      mutable_routes_internal_data();
  private:
  const ::graph_serialize::OptionalRouteInternalData& _internal_routes_internal_data(int index) const;
  ::graph_serialize::OptionalRouteInternalData* _internal_add_routes_internal_data();
  public:
  const ::graph_serialize::OptionalRouteInternalData& routes_internal_data(int index) const;
  ::graph_serialize::OptionalRouteInternalData* add_routes_internal_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::OptionalRouteInternalData >&
      routes_internal_data() const;

  // @@protoc_insertion_point(class_scope:graph_serialize.RoutesInternalData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::OptionalRouteInternalData > routes_internal_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Router final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:graph_serialize.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  ~Router() override;
  explicit PROTOBUF_CONSTEXPR Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Router& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Router& from) {
    Router::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "graph_serialize.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesInternalDataFieldNumber = 1,
  };
  // repeated .graph_serialize.RoutesInternalData routes_internal_data = 1;
  int routes_internal_data_size() const;
  private:
  int _internal_routes_internal_data_size() const;
  public:
  void clear_routes_internal_data();
  ::graph_serialize::RoutesInternalData* mutable_routes_internal_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::RoutesInternalData >*
      mutable_routes_internal_data();
  private:
  const ::graph_serialize::RoutesInternalData& _internal_routes_internal_data(int index) const;
  ::graph_serialize::RoutesInternalData* _internal_add_routes_internal_data();
  public:
  const ::graph_serialize::RoutesInternalData& routes_internal_data(int index) const;
  ::graph_serialize::RoutesInternalData* add_routes_internal_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::RoutesInternalData >&
      routes_internal_data() const;

  // @@protoc_insertion_point(class_scope:graph_serialize.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::RoutesInternalData > routes_internal_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RouteWeight

// uint32 bus_id = 1;
inline void RouteWeight::clear_bus_id() {
  _impl_.bus_id_ = 0u;
}
inline uint32_t RouteWeight::_internal_bus_id() const {
  return _impl_.bus_id_;
}
inline uint32_t RouteWeight::bus_id() const {
  // @@protoc_insertion_point(field_get:graph_serialize.RouteWeight.bus_id)
  return _internal_bus_id();
}
inline void RouteWeight::_internal_set_bus_id(uint32_t value) {
  
  _impl_.bus_id_ = value;
}
inline void RouteWeight::set_bus_id(uint32_t value) {
  _internal_set_bus_id(value);
  // @@protoc_insertion_point(field_set:graph_serialize.RouteWeight.bus_id)
}

// double total_time = 2;
inline void RouteWeight::clear_total_time() {
  _impl_.total_time_ = 0;
}
inline double RouteWeight::_internal_total_time() const {
  return _impl_.total_time_;
}
inline double RouteWeight::total_time() const {
  // @@protoc_insertion_point(field_get:graph_serialize.RouteWeight.total_time)
  return _internal_total_time();
}
inline void RouteWeight::_internal_set_total_time(double value) {
  
  _impl_.total_time_ = value;
}
inline void RouteWeight::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:graph_serialize.RouteWeight.total_time)
}

// uint32 span_count = 3;
inline void RouteWeight::clear_span_count() {
  _impl_.span_count_ = 0u;
}
inline uint32_t RouteWeight::_internal_span_count() const {
  return _impl_.span_count_;
}
inline uint32_t RouteWeight::span_count() const {
  // @@protoc_insertion_point(field_get:graph_serialize.RouteWeight.span_count)
  return _internal_span_count();
}
inline void RouteWeight::_internal_set_span_count(uint32_t value) {
  
  _impl_.span_count_ = value;
}
inline void RouteWeight::set_span_count(uint32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:graph_serialize.RouteWeight.span_count)
}

// -------------------------------------------------------------------

// IncidenceList

// repeated uint32 edge_id = 1;
inline int IncidenceList::_internal_edge_id_size() const {
  return _impl_.edge_id_.size();
}
inline int IncidenceList::edge_id_size() const {
  return _internal_edge_id_size();
}
inline void IncidenceList::clear_edge_id() {
  _impl_.edge_id_.Clear();
}
inline uint32_t IncidenceList::_internal_edge_id(int index) const {
  return _impl_.edge_id_.Get(index);
}
inline uint32_t IncidenceList::edge_id(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.IncidenceList.edge_id)
  return _internal_edge_id(index);
}
inline void IncidenceList::set_edge_id(int index, uint32_t value) {
  _impl_.edge_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:graph_serialize.IncidenceList.edge_id)
}
inline void IncidenceList::_internal_add_edge_id(uint32_t value) {
  _impl_.edge_id_.Add(value);
}
inline void IncidenceList::add_edge_id(uint32_t value) {
  _internal_add_edge_id(value);
  // @@protoc_insertion_point(field_add:graph_serialize.IncidenceList.edge_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::_internal_edge_id() const {
  return _impl_.edge_id_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
IncidenceList::edge_id() const {
  // @@protoc_insertion_point(field_list:graph_serialize.IncidenceList.edge_id)
  return _internal_edge_id();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::_internal_mutable_edge_id() {
  return &_impl_.edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
IncidenceList::mutable_edge_id() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.IncidenceList.edge_id)
  return _internal_mutable_edge_id();
}

// -------------------------------------------------------------------

// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  _impl_.from_ = 0u;
}
inline uint32_t Edge::_internal_from() const {
  return _impl_.from_;
}
inline uint32_t Edge::from() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(uint32_t value) {
  
  _impl_.from_ = value;
}
inline void Edge::set_from(uint32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:graph_serialize.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  _impl_.to_ = 0u;
}
inline uint32_t Edge::_internal_to() const {
  return _impl_.to_;
}
inline uint32_t Edge::to() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(uint32_t value) {
  
  _impl_.to_ = value;
}
inline void Edge::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:graph_serialize.Edge.to)
}

// .graph_serialize.RouteWeight weight = 3;
inline bool Edge::_internal_has_weight() const {
  return this != internal_default_instance() && _impl_.weight_ != nullptr;
}
inline bool Edge::has_weight() const {
  return _internal_has_weight();
}
inline void Edge::clear_weight() {
  if (GetArenaForAllocation() == nullptr && _impl_.weight_ != nullptr) {
    delete _impl_.weight_;
  }
  _impl_.weight_ = nullptr;
}
inline const ::graph_serialize::RouteWeight& Edge::_internal_weight() const {
  const ::graph_serialize::RouteWeight* p = _impl_.weight_;
  return p != nullptr ? *p : reinterpret_cast<const ::graph_serialize::RouteWeight&>(
      ::graph_serialize::_RouteWeight_default_instance_);
}
inline const ::graph_serialize::RouteWeight& Edge::weight() const {
  // @@protoc_insertion_point(field_get:graph_serialize.Edge.weight)
  return _internal_weight();
}
inline void Edge::unsafe_arena_set_allocated_weight(
    ::graph_serialize::RouteWeight* weight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weight_);
  }
  _impl_.weight_ = weight;
  if (weight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:graph_serialize.Edge.weight)
}
inline ::graph_serialize::RouteWeight* Edge::release_weight() {
  
  ::graph_serialize::RouteWeight* temp = _impl_.weight_;
  _impl_.weight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::graph_serialize::RouteWeight* Edge::unsafe_arena_release_weight() {
  // @@protoc_insertion_point(field_release:graph_serialize.Edge.weight)
  
  ::graph_serialize::RouteWeight* temp = _impl_.weight_;
  _impl_.weight_ = nullptr;
  return temp;
}
inline ::graph_serialize::RouteWeight* Edge::_internal_mutable_weight() {
  
  if (_impl_.weight_ == nullptr) {
    auto* p = CreateMaybeMessage<::graph_serialize::RouteWeight>(GetArenaForAllocation());
    _impl_.weight_ = p;
  }
  return _impl_.weight_;
}
inline ::graph_serialize::RouteWeight* Edge::mutable_weight() {
  ::graph_serialize::RouteWeight* _msg = _internal_mutable_weight();
  // @@protoc_insertion_point(field_mutable:graph_serialize.Edge.weight)
  return _msg;
}
inline void Edge::set_allocated_weight(::graph_serialize::RouteWeight* weight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weight_;
  }
  if (weight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weight);
    if (message_arena != submessage_arena) {
      weight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weight, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.weight_ = weight;
  // @@protoc_insertion_point(field_set_allocated:graph_serialize.Edge.weight)
}

// -------------------------------------------------------------------

// Graph

// repeated .graph_serialize.Edge edges = 1;
inline int Graph::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int Graph::edges_size() const {
  return _internal_edges_size();
}
inline void Graph::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::graph_serialize::Edge* Graph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >*
Graph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.Graph.edges)
  return &_impl_.edges_;
}
inline const ::graph_serialize::Edge& Graph::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::graph_serialize::Edge& Graph::edges(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.edges)
  return _internal_edges(index);
}
inline ::graph_serialize::Edge* Graph::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::graph_serialize::Edge* Graph::add_edges() {
  ::graph_serialize::Edge* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:graph_serialize.Graph.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::Edge >&
Graph::edges() const {
  // @@protoc_insertion_point(field_list:graph_serialize.Graph.edges)
  return _impl_.edges_;
}

// repeated .graph_serialize.IncidenceList incidence_lists = 2;
inline int Graph::_internal_incidence_lists_size() const {
  return _impl_.incidence_lists_.size();
}
inline int Graph::incidence_lists_size() const {
  return _internal_incidence_lists_size();
}
inline void Graph::clear_incidence_lists() {
  _impl_.incidence_lists_.Clear();
}
inline ::graph_serialize::IncidenceList* Graph::mutable_incidence_lists(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Graph.incidence_lists)
  return _impl_.incidence_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >*
Graph::mutable_incidence_lists() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.Graph.incidence_lists)
  return &_impl_.incidence_lists_;
}
inline const ::graph_serialize::IncidenceList& Graph::_internal_incidence_lists(int index) const {
  return _impl_.incidence_lists_.Get(index);
}
inline const ::graph_serialize::IncidenceList& Graph::incidence_lists(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.Graph.incidence_lists)
  return _internal_incidence_lists(index);
}
inline ::graph_serialize::IncidenceList* Graph::_internal_add_incidence_lists() {
  return _impl_.incidence_lists_.Add();
}
inline ::graph_serialize::IncidenceList* Graph::add_incidence_lists() {
  ::graph_serialize::IncidenceList* _add = _internal_add_incidence_lists();
  // @@protoc_insertion_point(field_add:graph_serialize.Graph.incidence_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::IncidenceList >&
Graph::incidence_lists() const {
  // @@protoc_insertion_point(field_list:graph_serialize.Graph.incidence_lists)
  return _impl_.incidence_lists_;
}

// -------------------------------------------------------------------

// RouteInternalData

// double total_time = 1;
inline void RouteInternalData::clear_total_time() {
  _impl_.total_time_ = 0;
}
inline double RouteInternalData::_internal_total_time() const {
  return _impl_.total_time_;
}
inline double RouteInternalData::total_time() const {
  // @@protoc_insertion_point(field_get:graph_serialize.RouteInternalData.total_time)
  return _internal_total_time();
}
inline void RouteInternalData::_internal_set_total_time(double value) {
  
  _impl_.total_time_ = value;
}
inline void RouteInternalData::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:graph_serialize.RouteInternalData.total_time)
}

// uint32 prev_edge = 2;
inline bool RouteInternalData::_internal_has_prev_edge() const {
  return optional_prev_edge_case() == kPrevEdge;
}
inline bool RouteInternalData::has_prev_edge() const {
  return _internal_has_prev_edge();
}
inline void RouteInternalData::set_has_prev_edge() {
  _impl_._oneof_case_[0] = kPrevEdge;
}
inline void RouteInternalData::clear_prev_edge() {
  if (_internal_has_prev_edge()) {
    _impl_.optional_prev_edge_.prev_edge_ = 0u;
    clear_has_optional_prev_edge();
  }
}
inline uint32_t RouteInternalData::_internal_prev_edge() const {
  if (_internal_has_prev_edge()) {
    return _impl_.optional_prev_edge_.prev_edge_;
  }
  return 0u;
}
inline void RouteInternalData::_internal_set_prev_edge(uint32_t value) {
  if (!_internal_has_prev_edge()) {
    clear_optional_prev_edge();
    set_has_prev_edge();
  }
  _impl_.optional_prev_edge_.prev_edge_ = value;
}
inline uint32_t RouteInternalData::prev_edge() const {
  // @@protoc_insertion_point(field_get:graph_serialize.RouteInternalData.prev_edge)
  return _internal_prev_edge();
}
inline void RouteInternalData::set_prev_edge(uint32_t value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:graph_serialize.RouteInternalData.prev_edge)
}

inline bool RouteInternalData::has_optional_prev_edge() const {
  return optional_prev_edge_case() != OPTIONAL_PREV_EDGE_NOT_SET;
}
inline void RouteInternalData::clear_has_optional_prev_edge() {
  _impl_._oneof_case_[0] = OPTIONAL_PREV_EDGE_NOT_SET;
}
inline RouteInternalData::OptionalPrevEdgeCase RouteInternalData::optional_prev_edge_case() const {
  return RouteInternalData::OptionalPrevEdgeCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OptionalRouteInternalData

// .graph_serialize.RouteInternalData route_internal_data = 1;
inline bool OptionalRouteInternalData::_internal_has_route_internal_data() const {
  return optional_route_internal_data_case() == kRouteInternalData;
}
inline bool OptionalRouteInternalData::has_route_internal_data() const {
  return _internal_has_route_internal_data();
}
inline void OptionalRouteInternalData::set_has_route_internal_data() {
  _impl_._oneof_case_[0] = kRouteInternalData;
}
inline void OptionalRouteInternalData::clear_route_internal_data() {
  if (_internal_has_route_internal_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.optional_route_internal_data_.route_internal_data_;
    }
    clear_has_optional_route_internal_data();
  }
}
inline ::graph_serialize::RouteInternalData* OptionalRouteInternalData::release_route_internal_data() {
  // @@protoc_insertion_point(field_release:graph_serialize.OptionalRouteInternalData.route_internal_data)
  if (_internal_has_route_internal_data()) {
    clear_has_optional_route_internal_data();
    ::graph_serialize::RouteInternalData* temp = _impl_.optional_route_internal_data_.route_internal_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.optional_route_internal_data_.route_internal_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::graph_serialize::RouteInternalData& OptionalRouteInternalData::_internal_route_internal_data() const {
  return _internal_has_route_internal_data()
      ? *_impl_.optional_route_internal_data_.route_internal_data_
      : reinterpret_cast< ::graph_serialize::RouteInternalData&>(::graph_serialize::_RouteInternalData_default_instance_);
}
inline const ::graph_serialize::RouteInternalData& OptionalRouteInternalData::route_internal_data() const {
  // @@protoc_insertion_point(field_get:graph_serialize.OptionalRouteInternalData.route_internal_data)
  return _internal_route_internal_data();
}
inline ::graph_serialize::RouteInternalData* OptionalRouteInternalData::unsafe_arena_release_route_internal_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:graph_serialize.OptionalRouteInternalData.route_internal_data)
  if (_internal_has_route_internal_data()) {
    clear_has_optional_route_internal_data();
    ::graph_serialize::RouteInternalData* temp = _impl_.optional_route_internal_data_.route_internal_data_;
    _impl_.optional_route_internal_data_.route_internal_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OptionalRouteInternalData::unsafe_arena_set_allocated_route_internal_data(::graph_serialize::RouteInternalData* route_internal_data) {
  clear_optional_route_internal_data();
  if (route_internal_data) {
    set_has_route_internal_data();
    _impl_.optional_route_internal_data_.route_internal_data_ = route_internal_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:graph_serialize.OptionalRouteInternalData.route_internal_data)
}
inline ::graph_serialize::RouteInternalData* OptionalRouteInternalData::_internal_mutable_route_internal_data() {
  if (!_internal_has_route_internal_data()) {
    clear_optional_route_internal_data();
    set_has_route_internal_data();
    _impl_.optional_route_internal_data_.route_internal_data_ = CreateMaybeMessage< ::graph_serialize::RouteInternalData >(GetArenaForAllocation());
  }
  return _impl_.optional_route_internal_data_.route_internal_data_;
}
inline ::graph_serialize::RouteInternalData* OptionalRouteInternalData::mutable_route_internal_data() {
  ::graph_serialize::RouteInternalData* _msg = _internal_mutable_route_internal_data();
  // @@protoc_insertion_point(field_mutable:graph_serialize.OptionalRouteInternalData.route_internal_data)
  return _msg;
}

inline bool OptionalRouteInternalData::has_optional_route_internal_data() const {
  return optional_route_internal_data_case() != OPTIONAL_ROUTE_INTERNAL_DATA_NOT_SET;
}
inline void OptionalRouteInternalData::clear_has_optional_route_internal_data() {
  _impl_._oneof_case_[0] = OPTIONAL_ROUTE_INTERNAL_DATA_NOT_SET;
}
inline OptionalRouteInternalData::OptionalRouteInternalDataCase OptionalRouteInternalData::optional_route_internal_data_case() const {
  return OptionalRouteInternalData::OptionalRouteInternalDataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoutesInternalData

// repeated .graph_serialize.OptionalRouteInternalData routes_internal_data = 1;
inline int RoutesInternalData::_internal_routes_internal_data_size() const {
  return _impl_.routes_internal_data_.size();
}
inline int RoutesInternalData::routes_internal_data_size() const {
  return _internal_routes_internal_data_size();
}
inline void RoutesInternalData::clear_routes_internal_data() {
  _impl_.routes_internal_data_.Clear();
}
inline ::graph_serialize::OptionalRouteInternalData* RoutesInternalData::mutable_routes_internal_data(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.RoutesInternalData.routes_internal_data)
  return _impl_.routes_internal_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::OptionalRouteInternalData >*
RoutesInternalData::mutable_routes_internal_data() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.RoutesInternalData.routes_internal_data)
  return &_impl_.routes_internal_data_;
}
inline const ::graph_serialize::OptionalRouteInternalData& RoutesInternalData::_internal_routes_internal_data(int index) const {
  return _impl_.routes_internal_data_.Get(index);
}
inline const ::graph_serialize::OptionalRouteInternalData& RoutesInternalData::routes_internal_data(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.RoutesInternalData.routes_internal_data)
  return _internal_routes_internal_data(index);
}
inline ::graph_serialize::OptionalRouteInternalData* RoutesInternalData::_internal_add_routes_internal_data() {
  return _impl_.routes_internal_data_.Add();
}
inline ::graph_serialize::OptionalRouteInternalData* RoutesInternalData::add_routes_internal_data() {
  ::graph_serialize::OptionalRouteInternalData* _add = _internal_add_routes_internal_data();
  // @@protoc_insertion_point(field_add:graph_serialize.RoutesInternalData.routes_internal_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::OptionalRouteInternalData >&
RoutesInternalData::routes_internal_data() const {
  // @@protoc_insertion_point(field_list:graph_serialize.RoutesInternalData.routes_internal_data)
  return _impl_.routes_internal_data_;
}

// -------------------------------------------------------------------

// Router

// repeated .graph_serialize.RoutesInternalData routes_internal_data = 1;
inline int Router::_internal_routes_internal_data_size() const {
  return _impl_.routes_internal_data_.size();
}
inline int Router::routes_internal_data_size() const {
  return _internal_routes_internal_data_size();
}
inline void Router::clear_routes_internal_data() {
  _impl_.routes_internal_data_.Clear();
}
inline ::graph_serialize::RoutesInternalData* Router::mutable_routes_internal_data(int index) {
  // @@protoc_insertion_point(field_mutable:graph_serialize.Router.routes_internal_data)
  return _impl_.routes_internal_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::RoutesInternalData >*
Router::mutable_routes_internal_data() {
  // @@protoc_insertion_point(field_mutable_list:graph_serialize.Router.routes_internal_data)
  return &_impl_.routes_internal_data_;
}
inline const ::graph_serialize::RoutesInternalData& Router::_internal_routes_internal_data(int index) const {
  return _impl_.routes_internal_data_.Get(index);
}
inline const ::graph_serialize::RoutesInternalData& Router::routes_internal_data(int index) const {
  // @@protoc_insertion_point(field_get:graph_serialize.Router.routes_internal_data)
  return _internal_routes_internal_data(index);
}
inline ::graph_serialize::RoutesInternalData* Router::_internal_add_routes_internal_data() {
  return _impl_.routes_internal_data_.Add();
}
inline ::graph_serialize::RoutesInternalData* Router::add_routes_internal_data() {
  ::graph_serialize::RoutesInternalData* _add = _internal_add_routes_internal_data();
  // @@protoc_insertion_point(field_add:graph_serialize.Router.routes_internal_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::graph_serialize::RoutesInternalData >&
Router::routes_internal_data() const {
  // @@protoc_insertion_point(field_list:graph_serialize.Router.routes_internal_data)
  return _impl_.routes_internal_data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace graph_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
